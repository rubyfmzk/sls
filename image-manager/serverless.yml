# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: image-manager
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: python3.8
  timeout: 60
  logRetentionInDays: 7

# you can overwrite defaults here
#  stage: dev
  region: ap-northeast-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: arn:aws:s3:::sabian-symbols/*
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: arn:aws:s3:::image-manager-rubyfmzk/*
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: arn:aws:dynamodb:ap-northeast-1:#{AWS::AccountId}:table/Collage
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: arn:aws:dynamodb:ap-northeast-1:#{AWS::AccountId}:table/CollageProduct

custom:
  env:
    prd: ${file(env/prd.yml)}

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  resize_put_sabian_images:
    handler: handler.resize_put_sabian_images
    layers:
      - arn:aws:lambda:ap-northeast-1:#{AWS::AccountId}:layer:python-pillow:1
  resize_put_sabian_images_by_event:
    handler: handler.resize_put_sabian_images_by_event
    layers:
      - arn:aws:lambda:ap-northeast-1:#{AWS::AccountId}:layer:python-pillow:1
    events:
      - s3:
          bucket: image-manager-rubyfmzk
          events:
            - "s3:ObjectCreated:*"
          rules:
            - prefix: sabian-symbols/full/
            - suffix: .jpg
          existing: true
  collage:
    handler: handler.collage
    layers:
      - arn:aws:lambda:ap-northeast-1:#{AWS::AccountId}:layer:python-pillow:1
    events:
      - s3:
          bucket: image-manager-rubyfmzk
          events:
            - "s3:ObjectCreated:*"
          rules:
            - prefix: public/collage/
            - suffix: '.jpg'
          existing: true
      - s3:
          bucket: image-manager-rubyfmzk
          events:
            - "s3:ObjectCreated:*"
          rules:
            - prefix: public/collage/
            - suffix: '.jpeg'
          existing: true
      - s3:
          bucket: image-manager-rubyfmzk
          events:
            - "s3:ObjectCreated:*"
          rules:
            - prefix: public/collage/
            - suffix: '.png'
          existing: true
      - s3:
          bucket: image-manager-rubyfmzk
          events:
            - "s3:ObjectCreated:*"
          rules:
            - prefix: public/collage/
            - suffix: '.base64'
          existing: true
  api_collage_list:
    handler: handler.api_collage_list
    layers:
      - arn:aws:lambda:ap-northeast-1:#{AWS::AccountId}:layer:python-pillow:1
    events:
      - http:
          path: /
          method: get
          cors: true
          integration: lambda
  api_collage_patch:
    handler: handler.api_collage_patch
    layers:
      - arn:aws:lambda:ap-northeast-1:#{AWS::AccountId}:layer:python-pillow:1
    events:
      - http:
          path: /{image_id}
          method: patch
          cors: true
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayWithAuthorizationAuthorizer
  api_collage_list_by_motif:
    handler: handler.api_collage_list_by_motif
    layers:
      - arn:aws:lambda:ap-northeast-1:#{AWS::AccountId}:layer:python-pillow:1
    events:
      - http:
          path: /motifs/{motif}
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              paths:
                motif: true


# you can add CloudFormation resource templates here
resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: image-manager-rubyfmzk
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD, PUT, POST]
            AllowedOrigins: ['*']
    ImageResourceS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: image-manager-rubyfmzk
        PolicyDocument:
          Statement:
            - Sid: GetResource
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: "arn:aws:s3:::image-manager-rubyfmzk/*"
              Condition:
                StringLike:
                  aws:Referer:
                    - https://sabian-calculator.com/*
                    - https://*.sabian-calculator.com/*
                    - http://localhost:*/*
            - Sid: ListResources
              Effect: Allow
              Principal: "*"
              Action:
              - "s3:ListBucket"
              Resource: "arn:aws:s3:::image-manager-rubyfmzk"
              Condition:
                StringLike:
                  aws:Referer:
                    - https://sabian-calculator.com/*
                    - https://*.sabian-calculator.com/*
                    - http://localhost:*/*
            - Sid: UploadImage
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              - s3:PutObject
              Resource: "arn:aws:s3:::image-manager-rubyfmzk/public/*"
              Condition:
                StringLike:
                  aws:Referer:
                    - https://*opyxz.cloudfront.net/*
    # CloudFrontOriginAccessIdentity:
    #   Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    #   Properties:
    #     CloudFrontOriginAccessIdentityConfig:
    #       Comment: image-manager-rubyfmzk
    # CloudFrontDistribution:
    #   Type: AWS::CloudFront::Distribution
    #   Properties:
    #     DistributionConfig:
    #       PriceClass: PriceClass_100
    #       Origins:
    #       - DomainName: image-manager-rubyfmzk.s3.amazonaws.com
    #         Id: S3origin-image-manager-rubyfmzk
    #         S3OriginConfig:
    #           OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
    #       DefaultCacheBehavior:
    #         TargetOriginId: S3origin-image-manager-rubyfmzk
    #         ViewerProtocolPolicy: redirect-to-https
    #         AllowedMethods:
    #         - GET
    #         - HEAD
    #         CachedMethods:
    #         - GET
    #         - HEAD
    #       HttpVersion: http2
    #       Enabled: true
    CollageDynamoDb:
      Type: AWS::DynamoDB::Table
      Properties:
        # テーブル名の指定
        TableName: Collage
        # キーの型を指定
        AttributeDefinitions:
          -
            AttributeName: motif
            AttributeType: S
          -
            AttributeName: image_id
            AttributeType: S
        # キーの種類を指定（ハッシュorレンジキー）
        KeySchema:
          -
            AttributeName: motif
            KeyType: HASH
          -
            AttributeName: image_id
            KeyType: RANGE

        # プロビジョニングするキャパシティーユニットの設定
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CollageProductDynamoDb:
      Type: AWS::DynamoDB::Table
      Properties:
        # テーブル名の指定
        TableName: CollageProduct
        # キーの型を指定
        AttributeDefinitions:
          -
            AttributeName: motif
            AttributeType: S
          -
            AttributeName: image_id
            AttributeType: S
        # キーの種類を指定（ハッシュorレンジキー）
        KeySchema:
          -
            AttributeName: motif
            KeyType: HASH
          -
            AttributeName: image_id
            KeyType: RANGE

        # プロビジョニングするキャパシティーユニットの設定
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ApiGatewayWithAuthorizationAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      DependsOn:
        - ApiGatewayRestApi # 暗黙的に適用されるが一応入れておく
      Properties:
        Name: ApiGatewayWithAuthorizationAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - arn:aws:cognito-idp:ap-northeast-1:#{AWS::AccountId}:userpool/${self:custom.env.${opt:stage}.POOL_ID}

 # Outputs:
 #    NewOutput:
 #      Description: "Description for the output"
 #      Value: "Some output value"
